// Mock database for demonstration purposes
// In a real application, you would use a proper database

import { prisma } from "@/lib/prisma"
import { saltAndHashPassword, verifyPassword } from "./password"

/**
 * Get user from the database by email and verify password (for credentials auth)
 */
export async function getUserFromDb(email: string, password: string) {
  // Find user by email
  const user = await prisma.user.findUnique({
    where: { email },
    select: {
      id: true,
      name: true,
      email: true,
      passwordHash: true,
    },
  })
  
  if (!user) return null

  // Verify password using bcrypt
  const isValidPassword = await verifyPassword(password, user.passwordHash)
  
  if (!isValidPassword) return null

  // Return user without sensitive data
  return {
    id: user.id,
    name: user.name,
    email: user.email,
  }
}

/**
 * Get user from the database by email only (for OAuth)
 */
export async function getUserByEmail(email: string) {
  const user = await prisma.user.findUnique({
    where: { email },
    select: {
      id: true,
      name: true,
      email: true,
    },
  })
  
  return user
}

/**
 * Create a new user in the database (for credentials auth)
 */
export async function createUser(name: string, email: string, password: string) {
  // Check if user already exists
  const existingUser = await prisma.user.findUnique({
    where: { email },
  })
  
  if (existingUser) return null

  // Hash the password
  const passwordHash = await saltAndHashPassword(password)

  // Create new user
  const user = await prisma.user.create({
    data: {
      name,
      email,
      passwordHash,
    },
    select: {
      id: true,
      name: true,
      email: true,
    },
  })

  return user
}

/**
 * Create or get user for OAuth authentication
 * Returns user and whether they are newly created
 */
export async function createUserFromOAuth(email: string, name: string) {
  // Check if user already exists
  const existingUser = await prisma.user.findUnique({
    where: { email },
    select: {
      id: true,
      name: true,
      email: true,
    },
  })
  
  if (existingUser) {
    return { user: existingUser, isNewUser: false }
  }

  // Create new OAuth user with a placeholder password hash
  // OAuth users don't need a real password
  const placeholderHash = await saltAndHashPassword('oauth-user-no-password')

  const user = await prisma.user.create({
    data: {
      name,
      email,
      passwordHash: placeholderHash,
    },
    select: {
      id: true,
      name: true,
      email: true,
    },
  })

  return { user, isNewUser: true }
} 