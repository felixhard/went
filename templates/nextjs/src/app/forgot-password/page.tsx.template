"use client"

import { useState, useEffect } from "react"
import { useSearchParams } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { cn } from "@/lib/utils"
import { trpc } from "@/lib/trpc"

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [isEmailSubmitted, setIsEmailSubmitted] = useState(false)
  const [isPasswordResetSuccess, setIsPasswordResetSuccess] = useState(false)
  const [token, setToken] = useState<string | null>(null)
  
  const searchParams = useSearchParams()

  const requestReset = trpc.user.requestPasswordReset.useMutation({
    onSuccess: () => {
      setIsEmailSubmitted(true)
    },
    onError: (error) => {
      console.error('Password reset request failed:', error)
    }
  })

  const resetPassword = trpc.user.resetPassword.useMutation({
    onSuccess: () => {
      setIsPasswordResetSuccess(true)
    },
    onError: (error) => {
      console.error('Password reset failed:', error)
    }
  })

  useEffect(() => {
    const tokenParam = searchParams.get('token')
    setToken(tokenParam)
  }, [searchParams])

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!email) return

    requestReset.mutate({ email })
  }

  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!token) return
    if (password !== confirmPassword) return
    if (password.length < 8) return

    resetPassword.mutate({ 
      token, 
      newPassword: password 
    })
  }

  // Show invalid token page
  if (token && !resetPassword.isPending && !isPasswordResetSuccess) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white p-4">
        <Card className="w-full max-w-md bg-white border border-gray-200 shadow-lg">
          <CardHeader className="text-center pb-6">
            <CardTitle className={cn(
              "text-2xl font-bold text-black",
              "font-[family-name:var(--font-geist-sans)]"
            )}>
              Reset Your Password
            </CardTitle>
            <CardDescription className={cn(
              "text-gray-600",
              "font-[family-name:var(--font-geist-mono)] text-sm"
            )}>
              Enter your new password below
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            <form onSubmit={handlePasswordSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label 
                  htmlFor="password"
                  className={cn(
                    "text-black font-medium",
                    "font-[family-name:var(--font-geist-sans)]"
                  )}
                >
                  New Password
                </Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Enter new password"
                  required
                  className={cn(
                    "bg-white border-gray-300 text-black placeholder:text-gray-500",
                    "focus:border-black focus:ring-black",
                    "font-[family-name:var(--font-geist-mono)]"
                  )}
                />
                {password && password.length < 8 && (
                  <p className={cn(
                    "text-red-600 text-xs",
                    "font-[family-name:var(--font-geist-mono)]"
                  )}>
                    Password must be at least 8 characters long
                  </p>
                )}
              </div>

              <div className="space-y-2">
                <Label 
                  htmlFor="confirmPassword"
                  className={cn(
                    "text-black font-medium",
                    "font-[family-name:var(--font-geist-sans)]"
                  )}
                >
                  Confirm New Password
                </Label>
                <Input
                  id="confirmPassword"
                  type="password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  placeholder="Confirm new password"
                  required
                  className={cn(
                    "bg-white border-gray-300 text-black placeholder:text-gray-500",
                    "focus:border-black focus:ring-black",
                    "font-[family-name:var(--font-geist-mono)]"
                  )}
                />
                {confirmPassword && password !== confirmPassword && (
                  <p className={cn(
                    "text-red-600 text-xs",
                    "font-[family-name:var(--font-geist-mono)]"
                  )}>
                    Passwords do not match
                  </p>
                )}
              </div>

              {resetPassword.error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                  <p className={cn(
                    "text-red-800 text-sm",
                    "font-[family-name:var(--font-geist-mono)]"
                  )}>
                    {resetPassword.error.message}
                  </p>
                </div>
              )}

              <Button
                type="submit"
                disabled={resetPassword.isPending || password !== confirmPassword || password.length < 8}
                className={cn(
                  "w-full bg-black text-white hover:bg-gray-800 disabled:opacity-50",
                  "font-[family-name:var(--font-geist-sans)] font-medium"
                )}
              >
                {resetPassword.isPending ? "Resetting..." : "Reset Password"}
              </Button>

              <div className="text-center">
                <Link 
                  href="/login"
                  className={cn(
                    "text-black hover:underline text-sm",
                    "font-[family-name:var(--font-geist-mono)]"
                  )}
                >
                  Back to Sign In
                </Link>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show password reset success page
  if (isPasswordResetSuccess) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white p-4">
        <Card className="w-full max-w-md bg-white border border-gray-200 shadow-lg">
          <CardHeader className="text-center pb-6">
            <CardTitle className={cn(
              "text-2xl font-bold text-black",
              "font-[family-name:var(--font-geist-sans)]"
            )}>
              Password Reset Successful
            </CardTitle>
            <CardDescription className={cn(
              "text-gray-600",
              "font-[family-name:var(--font-geist-mono)] text-sm"
            )}>
              Your password has been successfully reset
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-4">
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <p className={cn(
                "text-green-800 text-sm",
                "font-[family-name:var(--font-geist-mono)]"
              )}>
                You can now sign in with your new password.
              </p>
            </div>

            <Link href="/login">
              <Button 
                className={cn(
                  "w-full bg-black text-white hover:bg-gray-800",
                  "font-[family-name:var(--font-geist-sans)] font-medium"
                )}
              >
                Sign In
              </Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show email submitted confirmation
  if (isEmailSubmitted) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white p-4">
        <Card className="w-full max-w-md bg-white border border-gray-200 shadow-lg">
          <CardHeader className="text-center pb-6">
            <CardTitle className={cn(
              "text-2xl font-bold text-black",
              "font-[family-name:var(--font-geist-sans)]"
            )}>
              Check Your Email
            </CardTitle>
            <CardDescription className={cn(
              "text-gray-600",
              "font-[family-name:var(--font-geist-mono)] text-sm"
            )}>
              We&apos;ve sent password reset instructions to your email
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <p className={cn(
                "text-green-800 text-sm",
                "font-[family-name:var(--font-geist-mono)]"
              )}>
                If an account with that email exists, we sent a password reset link. 
                Please check your email and follow the instructions to reset your password.
              </p>
            </div>

            <div className="text-center space-y-4">
              <p className={cn(
                "text-gray-600 text-sm",
                "font-[family-name:var(--font-geist-mono)]"
              )}>
                Didn&apos;t receive the email? Check your spam folder or try again.
              </p>
              
              <Button
                onClick={() => {
                  setIsEmailSubmitted(false)
                  setEmail("")
                }}
                variant="outline"
                className={cn(
                  "w-full bg-white border-gray-300 text-black hover:bg-gray-50",
                  "font-[family-name:var(--font-geist-sans)] font-medium"
                )}
              >
                Try Again
              </Button>

              <Link href="/login">
                <Button 
                  className={cn(
                    "w-full bg-black text-white hover:bg-gray-800",
                    "font-[family-name:var(--font-geist-sans)] font-medium"
                  )}
                >
                  Back to Sign In
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show email request form (default)
  return (
    <div className="min-h-screen flex items-center justify-center bg-white p-4">
      <Card className="w-full max-w-md bg-white border border-gray-200 shadow-lg">
        <CardHeader className="text-center pb-6">
          <CardTitle className={cn(
            "text-2xl font-bold text-black",
            "font-[family-name:var(--font-geist-sans)]"
          )}>
            Forgot Password
          </CardTitle>
          <CardDescription className={cn(
            "text-gray-600",
            "font-[family-name:var(--font-geist-mono)] text-sm"
          )}>
            Enter your email address and we&apos;ll send you a link to reset your password
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          <form onSubmit={handleEmailSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label 
                htmlFor="email"
                className={cn(
                  "text-black font-medium",
                  "font-[family-name:var(--font-geist-sans)]"
                )}
              >
                Email Address
              </Label>
              <Input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                required
                className={cn(
                  "bg-white border-gray-300 text-black placeholder:text-gray-500",
                  "focus:border-black focus:ring-black",
                  "font-[family-name:var(--font-geist-mono)]"
                )}
              />
            </div>

            {requestReset.error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className={cn(
                  "text-red-800 text-sm",
                  "font-[family-name:var(--font-geist-mono)]"
                )}>
                  {requestReset.error.message}
                </p>
              </div>
            )}

            <Button
              type="submit"
              disabled={requestReset.isPending || !email}
              className={cn(
                "w-full bg-black text-white hover:bg-gray-800 disabled:opacity-50",
                "font-[family-name:var(--font-geist-sans)] font-medium"
              )}
            >
              {requestReset.isPending ? "Sending..." : "Send Reset Link"}
            </Button>

            <div className="text-center">
              <Link 
                href="/login"
                className={cn(
                  "text-black hover:underline text-sm",
                  "font-[family-name:var(--font-geist-mono)]"
                )}
              >
                Back to Sign In
              </Link>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
} 