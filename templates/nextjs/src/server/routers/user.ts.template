import { z } from 'zod'
import { router, publicProcedure, protectedProcedure, prisma } from '../trpc'
import { saltAndHashPassword } from '@/utils/password'
import { sendEmail, generatePasswordResetEmail, generateWelcomeEmail } from '@/lib/email'
import { randomBytes } from 'crypto'

export const userRouter = router({
  // Create a new user (public - for registration)
  create: publicProcedure
    .input(
      z.object({
        name: z.string().min(2).optional(),
        email: z.string().email(),
        password: z.string().min(8),
      })
    )
    .mutation(async ({ input }) => {
      const { name, email, password } = input

      // Check if user already exists
      const existingUser = await prisma.user.findUnique({
        where: { email },
      })

      if (existingUser) {
        throw new Error('User with this email already exists')
      }

      // Hash the password
      const passwordHash = await saltAndHashPassword(password)

      // Create the user
      const user = await prisma.user.create({
        data: {
          name,
          email,
          passwordHash,
        },
        select: {
          id: true,
          name: true,
          email: true,
          createdAt: true,
        },
      })

      // Send welcome email
      try {
        await sendEmail({
          to: user.email,
          subject: 'Welcome to MyApp!',
          html: generateWelcomeEmail(user.name || "", user.email),
        })
        console.log(`Welcome email sent to ${user.email}`)
      } catch (emailError) {
        // Don't fail the registration if email fails
        console.error('Failed to send welcome email:', emailError)
      }

      return user
    }),

  // Get user by email and verify password (for authentication)
  authenticate: publicProcedure
    .input(
      z.object({
        email: z.string().email(),
        password: z.string(),
      })
    )
    .query(async ({ input }) => {
      const { email, password } = input

      const user = await prisma.user.findUnique({
        where: { email },
        select: {
          id: true,
          name: true,
          email: true,
          passwordHash: true,
        },
      })

      if (!user) {
        return null
      }

      // Verify password
      const { verifyPassword } = await import('@/utils/password')
      const isValidPassword = await verifyPassword(password, user.passwordHash)

      if (!isValidPassword) {
        return null
      }

      // Return user without password hash
      return {
        id: user.id,
        name: user.name,
        email: user.email,
      }
    }),

  // Get current user profile (protected)
  me: protectedProcedure.query(async ({ ctx }) => {
    const user = await prisma.user.findUnique({
      where: { id: ctx.session.user.id },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true,
        updatedAt: true,
      },
    })

    return user
  }),

  // Update user profile (protected)
  update: protectedProcedure
    .input(
      z.object({
        name: z.string().min(2).optional(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const user = await prisma.user.update({
        where: { id: ctx.session.user.id },
        data: input,
        select: {
          id: true,
          name: true,
          email: true,
          updatedAt: true,
        },
      })

      return user
    }),

  // Request password reset (public)
  requestPasswordReset: publicProcedure
    .input(
      z.object({
        email: z.string().email(),
      })
    )
    .mutation(async ({ input }) => {
      const { email } = input

      // Find user by email
      const user = await prisma.user.findUnique({
        where: { email },
        select: {
          id: true,
          email: true,
          name: true,
        },
      })

      // Always return success to prevent email enumeration attacks
      if (!user) {
        return { success: true, message: 'If an account with that email exists, we sent a password reset link.' }
      }

      // Generate reset token
      const resetToken = randomBytes(32).toString('hex')
      const resetTokenExpiry = new Date(Date.now() + 60 * 60 * 1000) // 1 hour from now

      // Save reset token to database
      await prisma.user.update({
        where: { id: user.id },
        data: {
          resetToken,
          resetTokenExpiry,
        },
      })

      // Generate reset URL
      const resetUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/forgot-password?token=${resetToken}`

      // Send email
      try {
        await sendEmail({
          to: user.email,
          subject: 'Reset Your Password - MyApp',
          html: generatePasswordResetEmail(resetUrl, user.email),
        })

        return { success: true, message: 'If an account with that email exists, we sent a password reset link.' }
      } catch (error) {
        console.error('Failed to send password reset email:', error)
        throw new Error('Failed to send password reset email. Please try again later.')
      }
    }),

  // Reset password with token (public)
  resetPassword: publicProcedure
    .input(
      z.object({
        token: z.string(),
        newPassword: z.string().min(8),
      })
    )
    .mutation(async ({ input }) => {
      const { token, newPassword } = input

      // Find user with valid reset token
      const user = await prisma.user.findUnique({
        where: {
          resetToken: token,
        },
        select: {
          id: true,
          email: true,
          resetTokenExpiry: true,
        },
      })

      if (!user || !user.resetTokenExpiry) {
        throw new Error('Invalid or expired reset token')
      }

      // Check if token is expired
      if (user.resetTokenExpiry < new Date()) {
        throw new Error('Reset token has expired')
      }

      // Hash new password
      const passwordHash = await saltAndHashPassword(newPassword)

      // Update password and clear reset token
      await prisma.user.update({
        where: { id: user.id },
        data: {
          passwordHash,
          resetToken: null,
          resetTokenExpiry: null,
        },
      })

      return { success: true, message: 'Password has been reset successfully' }
    }),
}) 