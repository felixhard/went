import { z } from 'zod';
import { publicProcedure, router } from '../trpc'; // Adjust path as needed

/**
 * This is an example tRPC router.
 * Parsed with Zod, it ensures type-safety from back to front.
 */
export const exampleRouter = router({
  hello: publicProcedure
    .input(
      z.object({
          text: z.string().nullish(), // Input can be an object with an optional 'text' string
        }).nullish(), // The entire input object itself is optional
    )
    .query(({ input }) => {
      // Output a greeting string
      return {
        greeting: `Hello ${input?.text ?? 'world'} from your tRPC API!`,
      };
    }),

  // Example of a mutation:
  // createMessage: publicProcedure
  //   .input(z.object({ message: z.string().min(1) }))
  //   .mutation(async ({ input, ctx }) => {
  //     // console.log(`Message: ${input.message}`, ctx); // Access context if needed
  //     return { success: true, messageSent: input.message };
  //   }),
});