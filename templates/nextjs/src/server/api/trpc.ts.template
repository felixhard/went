import { initTRPC } from '@trpc/server';
import superjson from 'superjson';
import { ZodError } from 'zod';

/**
 * Context creation.
 * Replace with your actual context, e.g., DB connections, user session.
 */
export async function createContext() {
  // return { prisma, session }; // Example
  return {};
}

export type Context = Awaited<ReturnType<typeof createContext>>;

/**
 * Initialize tRPC - done only once per backend.
 * Uses superjson for data transformation and a custom error formatter for Zod errors.
 */
const t = initTRPC.context<Context>().create({
  transformer: superjson,
  errorFormatter({ shape, error }) {
    return {
      ...shape,
      data: {
        ...shape.data,
        zodError:
          error.cause instanceof ZodError ? error.cause.flatten() : null,
      },
    };
  },
});

/**
 * Export reusable tRPC components.
 */
export const router = t.router; // Main router factory
export const publicProcedure = t.procedure; // Basic procedure builder
// export const middleware = t.middleware; // For creating custom middleware
// export const protectedProcedure = t.procedure.use(yourAuthMiddleware); // Example for protected routes