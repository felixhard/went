"use client"

import { useState, useEffect } from "react"
import { signIn } from "next-auth/react"
import { useRouter } from "next/navigation"
import { z } from "zod"
import { signInSchema } from "@/lib/zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { cn } from "@/lib/utils"
import Link from "next/link"

type FormData = z.infer<typeof signInSchema>

export function LoginForm() {
  const router = useRouter()
  const [formData, setFormData] = useState<FormData>({
    email: "",
    password: "",
  })
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [isGoogleLoading, setIsGoogleLoading] = useState<boolean>(false)
  const [isGoogleEnabled, setIsGoogleEnabled] = useState<boolean>(false)

  // Check if Google OAuth is enabled
  useEffect(() => {
    const checkGoogleOAuth = async () => {
      try {
        const response = await fetch('/api/auth/providers')
        const providers = await response.json()
        setIsGoogleEnabled(!!providers.google)
      } catch (error) {
        console.error('Failed to check OAuth providers:', error)
      }
    }
    checkGoogleOAuth()
  }, [])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)
    setIsLoading(true)

    try {
      // Validate the form data
      signInSchema.parse(formData)

      // Sign in with credentials
      const result = await signIn("credentials", {
        redirect: false,
        email: formData.email,
        password: formData.password,
      })

      if (result?.error) {
        setError(result.error)
        return
      }

      // Redirect to dashboard on success
      router.push("/dashboard")
      router.refresh()
    } catch (err) {
      if (err instanceof z.ZodError) {
        // Show the first validation error
        setError(err.errors[0].message)
      } else {
        setError("Something went wrong. Please try again.")
      }
    } finally {
      setIsLoading(false)
    }
  }

  const handleGoogleSignIn = async () => {
    setError(null)
    setIsGoogleLoading(true)
    
    try {
      const result = await signIn("google", {
        redirect: false,
        callbackUrl: "/dashboard"
      })
      
      if (result?.error) {
        setError("Failed to sign in with Google")
        return
      }
      
      if (result?.url) {
        router.push(result.url)
      }
    } catch (error) {
      setError("Something went wrong with Google sign-in")
    } finally {
      setIsGoogleLoading(false)
    }
  }

  return (
    <Card className="w-full max-w-md mx-auto bg-white border border-gray-200 shadow-lg">
      <CardHeader className="space-y-1 pb-6">
        <CardTitle className={cn(
          "text-2xl font-bold text-black text-center",
          "font-[family-name:var(--font-geist-sans)]"
        )}>
          Welcome back
        </CardTitle>
        <CardDescription className={cn(
          "text-center text-gray-600",
          "font-[family-name:var(--font-geist-mono)] text-sm"
        )}>
          Enter your credentials to access your account
        </CardDescription>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {error && (
          <div className={cn(
            "p-3 bg-red-50 border border-red-200 rounded-md",
            "font-[family-name:var(--font-geist-mono)] text-sm text-red-700"
          )}>
            {error}
          </div>
        )}

        {/* Google OAuth Button */}
        {isGoogleEnabled && (
          <>
            <Button
              type="button"
              onClick={handleGoogleSignIn}
              disabled={isGoogleLoading || isLoading}
              className={cn(
                "w-full bg-white text-black border border-gray-300 hover:bg-gray-50",
                "focus:ring-2 focus:ring-gray-300 focus:ring-offset-2",
                "font-[family-name:var(--font-geist-sans)] font-medium",
                "disabled:opacity-50 disabled:cursor-not-allowed",
                "transition-all duration-200"
              )}
            >
              {isGoogleLoading ? (
                <span className="font-[family-name:var(--font-geist-mono)] text-sm">
                  Signing in...
                </span>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  <svg className="w-4 h-4" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  Sign in with Google
                </div>
              )}
            </Button>
            
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-white px-2 text-gray-500 font-[family-name:var(--font-geist-mono)]">
                  Or continue with email
                </span>
              </div>
            </div>
          </>
        )}
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label 
              htmlFor="email" 
              className={cn(
                "text-black font-medium",
                "font-[family-name:var(--font-geist-mono)] text-sm"
              )}
            >
              Email
            </Label>
            <Input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              required
              placeholder="you@example.com"
              className={cn(
                "bg-white border-gray-300 text-black placeholder:text-gray-500",
                "focus:border-black focus:ring-black",
                "font-[family-name:var(--font-geist-mono)]"
              )}
            />
          </div>
          
          <div className="space-y-2">
            <Label 
              htmlFor="password" 
              className={cn(
                "text-black font-medium",
                "font-[family-name:var(--font-geist-mono)] text-sm"
              )}
            >
              Password
            </Label>
            <Input
              id="password"
              name="password"
              type="password"
              value={formData.password}
              onChange={handleChange}
              required
              placeholder="••••••••"
              className={cn(
                "bg-white border-gray-300 text-black placeholder:text-gray-500",
                "focus:border-black focus:ring-black",
                "font-[family-name:var(--font-geist-mono)]"
              )}
            />
          </div>
          
          <Button
            type="submit"
            disabled={isLoading || isGoogleLoading}
            className={cn(
              "w-full bg-black text-white hover:bg-gray-800",
              "focus:ring-2 focus:ring-black focus:ring-offset-2",
              "font-[family-name:var(--font-geist-sans)] font-medium",
              "disabled:opacity-50 disabled:cursor-not-allowed",
              "transition-all duration-200"
            )}
          >
            {isLoading ? (
              <span className="font-[family-name:var(--font-geist-mono)] text-sm">
                Signing in...
              </span>
            ) : (
              "Sign In"
            )}
          </Button>
        </form>

        <div className="text-center">
          <Link 
            href="/forgot-password"
            className={cn(
              "text-black hover:underline text-sm",
              "font-[family-name:var(--font-geist-mono)]"
            )}
          >
            Forgot your password?
          </Link>
        </div>
      </CardContent>
    </Card>
  )
} 