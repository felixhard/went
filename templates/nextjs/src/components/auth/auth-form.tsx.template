"use client";

import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter, useSearchParams } from "next/navigation";
import { FaGoogle, FaGithub } from "react-icons/fa";
import { ClientOnly } from "@/components/client-only";

export type AuthMode = "login" | "signup";

export interface AuthFormProps {
  mode: AuthMode;
  appearance?: {
    colors?: {
      brand?: string;
      brandAccent?: string;
      submitButtonText?: string;
    };
  };
  logo?: string;
  socialLayout?: "horizontal" | "vertical";
}

export function AuthForm({
  mode = "login",
  appearance = {},
  logo,
  socialLayout = "horizontal",
}: AuthFormProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(
    searchParams?.get("error") === "CredentialsSignin" 
      ? "Invalid email or password" 
      : null
  );
  const [success, setSuccess] = useState<string | null>(
    searchParams?.get("success") 
      ? searchParams.get("success") 
      : null
  );
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  });

  const isLogin = mode === "login";
  const title = isLogin ? "Log in to your account" : "Create an account";
  const subtitle = isLogin
    ? "Enter your email and password to continue"
    : "Enter your details below to create your account";
  const submitButtonText = isLogin
    ? isLoading
      ? "Signing in..."
      : "Sign In"
    : isLoading
    ? "Creating account..."
    : "Create account";
  const altLink = isLogin
    ? { text: "Don't have an account?", href: "/register", linkText: "Sign up" }
    : { text: "Already have an account?", href: "/login", linkText: "Log in" };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccess(null);

    if (isLogin) {
      try {
        const result = await signIn("credentials", {
          email: formData.email,
          password: formData.password,
          redirect: false,
        });

        if (result?.error) {
          setError("Invalid email or password");
          setIsLoading(false);
          return;
        }

        router.push("/");
        router.refresh();
      } catch (error) {
        setError("Something went wrong. Please try again.");
        setIsLoading(false);
      }
    } else {
      try {
        const response = await fetch("/api/auth/register", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || "Registration failed");
        }

        // Check if the response contains a message about missing password field
        if (data.message && data.message.includes("password field is not in the database schema")) {
          setSuccess("Account created successfully! Please set up your database schema with the password field and try logging in.");
          setIsLoading(false);
          setTimeout(() => {
            router.push("/login?success=Account+created+successfully");
          }, 2000);
          return;
        }

        // Sign in the user after successful registration
        await signIn("credentials", {
          email: formData.email,
          password: formData.password,
          callbackUrl: "/",
        });
      } catch (error) {
        setError(error instanceof Error ? error.message : "Something went wrong");
        setIsLoading(false);
      }
    }
  };

  const handleOAuthSignIn = (provider: "google" | "github") => {
    setIsLoading(true);
    signIn(provider, { callbackUrl: "/" });
  };

  // Apply custom styles based on appearance prop
  const styles = {
    brand: appearance?.colors?.brand || "#000000",
    brandAccent: appearance?.colors?.brandAccent || "#404040",
    submitButtonText: appearance?.colors?.submitButtonText || "#ffffff",
  };

  return (
    <div className="grid gap-6 font-bold">
      {logo && (
        <div className="flex justify-center">
          <img src={logo} alt="Logo" className="h-12 w-auto" />
        </div>
      )}

      <div
        className={`grid ${
          socialLayout === "horizontal" ? "grid-cols-2" : "grid-cols-1"
        } gap-4`}
      >
        <button
          type="button"
          onClick={() => handleOAuthSignIn("google")}
          disabled={isLoading}
          className="flex h-11 items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-bold text-gray-700 shadow-sm transition-colors hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
          style={{
            borderColor: styles.brand,
          }}
        >
          <FaGoogle className="mr-2 h-4 w-4" />
          Google
        </button>
        <button
          type="button"
          onClick={() => handleOAuthSignIn("github")}
          disabled={isLoading}
          className="flex h-11 items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-bold text-gray-700 shadow-sm transition-colors hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
          style={{
            borderColor: styles.brand,
          }}
        >
          <FaGithub className="mr-2 h-4 w-4" />
          GitHub
        </button>
      </div>

      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <span className="w-full border-t" />
        </div>
        <div className="relative flex justify-center text-xs uppercase font-bold">
          <span className="bg-white px-2 text-gray-500">Or continue with</span>
        </div>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid gap-4">
          {!isLogin && (
            <div className="grid gap-2">
              <label
                htmlFor="name"
                className="text-sm font-bold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                Name
              </label>
              <ClientOnly>
                <input
                  id="name"
                  name="name"
                  type="text"
                  autoCapitalize="words"
                  autoCorrect="off"
                  disabled={isLoading}
                  value={formData.name}
                  onChange={handleChange}
                  required={!isLogin}
                  className="flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-bold ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                />
              </ClientOnly>
            </div>
          )}
          <div className="grid gap-2">
            <label
              htmlFor="email"
              className="text-sm font-bold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Email
            </label>
            <ClientOnly>
              <input
                id="email"
                name="email"
                type="email"
                autoCapitalize="none"
                autoCorrect="off"
                disabled={isLoading}
                value={formData.email}
                onChange={handleChange}
                required
                className="flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-bold ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              />
            </ClientOnly>
          </div>
          <div className="grid gap-2">
            <div className="flex items-center justify-between">
              <label
                htmlFor="password"
                className="text-sm font-bold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                Password
              </label>
              {isLogin && (
                <a
                  href="/forgot-password"
                  className="text-sm font-bold text-gray-900 hover:underline underline-offset-4"
                  style={{ color: styles.brand }}
                >
                  Forgot password?
                </a>
              )}
            </div>
            <ClientOnly>
              <input
                id="password"
                name="password"
                type="password"
                autoCapitalize="none"
                disabled={isLoading}
                value={formData.password}
                onChange={handleChange}
                required
                className="flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-bold ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              />
            </ClientOnly>
          </div>
          {error && (
            <div className="text-sm text-red-500 font-bold">{error}</div>
          )}
          {success && (
            <div className="text-sm text-green-500 font-bold">{success}</div>
          )}
          <button
            type="submit"
            disabled={isLoading}
            className="inline-flex h-10 items-center justify-center rounded-md bg-gray-900 px-4 py-2 text-sm font-bold text-white transition-colors hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            style={{
              backgroundColor: styles.brand,
              color: styles.submitButtonText,
              ":hover": {
                backgroundColor: styles.brandAccent,
              },
            }}
          >
            {submitButtonText}
          </button>
        </div>
      </form>
    </div>
  );
} 